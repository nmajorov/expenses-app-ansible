---
# old --- not used solution ... just keep as example
# deploy SSO and postgresql database
# expenses app server and client using SSO for users authorisation/authentications
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-postgresql
spec:
  params:
    - name: postgesql-user
      type: string
      description: login for postgresql database
      default: keycloak

    - name: postgresql-password
      type: string
      description: password for postgresql database
      default: keycloak

    - name: postresql-database
      type: string
      default: root
      description: default database

    - name: app-name
      type: string
      default: expense-database

    - name: deleteExisting
      description: clean existing deployment
      type: string
      default: "true"

  steps:
    - name: deploy-database
      image: quay.io/openshift/origin-cli:latest
      env:
        - name: PARAM_DELETE_EXISTING
          value: $(inputs.params.deleteExisting)
      script: |
          #!/usr/bin/env bash
          # oc policy add-role-to-user view system:serviceaccount:$(oc project -q):default
          echo "create database"

          clean(){
            echo "============================="
            echo "run clean previous deployment"
            echo "============================="
            oc delete all --selector app=$(inputs.params.app-name)  --ignore-not-found=true
            oc delete pvc --selector app=$(inputs.params.app-name)  --ignore-not-found=true
            oc delete secrets   --selector app=$(inputs.params.app-name)  --ignore-not-found=true
          }

          deploy(){
            echo

            echo "============================="
            echo "run database deployment"
            echo "============================="
            oc new-app --name=$(inputs.params.app-name) --template openshift/postgresql-persistent \
            --param POSTGRESQL_USER=$(inputs.params.postgresql-password) \
            --param POSTGRESQL_PASSWORD=$(inputs.params.postgesql-user) \
            --param POSTGRESQL_DATABASE=$(inputs.params.postresql-database) \
            --param DATABASE_SERVICE_NAME=$(inputs.params.app-name)


            ROLLOUT_OK=true

            oc label dc/$(inputs.params.app-name)  app.kubernetes.io/name=postgresql --overwrite


            #wait and let container starts
            sleep 1m

            if oc rollout status dc/$(inputs.params.app-name)  | grep -q "failed progressing"
            then
              echo "rollout is failed"
              ROLLOUT_OK=false
              echo
            fi

            echo
            echo "ROLLOUT_OK=$ROLLOUT_OK"
            echo

            if [ "$ROLLOUT_OK" = "false" ] ; then
              echo "start rollout latest"
              oc rollout latest dc/$(inputs.params.app-name)
            fi

          }


          ##############################
          # main programm starts here  #
          # ############################
          if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
            clean
          fi

          deploy



    - name: check-if-database-is-ready
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash
        # check for 3 minute if container is ready

        containerReady="False"

        for i in {1..10}
        do
          response=$(oc get pods --selector name=$(inputs.params.app-name) -o=jsonpath="{.items['.status'].conditions[?(@.type=='Ready')].status}")

          echo " database deployment is ready: $response "

          if [[ "$response" == "True" ]]
           then
              containerReady="True"
              break
           else
              sleep 1m
          fi

        done

        if [[ "$containerReady" == "False" ]]
        then
          exit 1
        fi

    - name: provision-database
      image: registry.redhat.io/rhel8/postgresql-10
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          ls -lisa
          echo "import test sql data"
          PGPASSWORD=$(inputs.params.postgresql-password) psql --host=$(inputs.params.app-name) \
            --username=$(inputs.params.postgesql-user) \
            --dbname=$(inputs.params.postresql-database) < ./keycloak/keycloak_export.sql

  workspaces:
    - name: output
      mountPath: /workspace/source
